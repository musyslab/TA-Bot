Welcome to **TA-Bot**!

---

## :warning: Known Issues

- **Yarn in Docker**: A bug currently prevents Yarn from functioning in our Docker container.

---

## Dependencies

- Docker Desktop (windows and mac)

## :bulb: Workaround for Windows Users

To run the TA-Bot Docker development environment on Windows, you will need to:

1. Install **WSL2** (required for Docker).
2. Install a Linux distribution (e.g., Ubuntu).

Follow [this guide](https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-10#1-overview) to set up WSL2 and Ubuntu. Then, proceed with the steps below to run TA-Bot.

---

## :rocket: Steps to Running the TA-Bot Docker Development Environment

2. In the main directory run "git submodule update --init --recursive"

--- 

3.  Download and install Docker runner.

Mac and Linux follow similar steps: 

### Mac

execute
1.  `brew install docker` - Installs Docker CLI tools
2. `brew install --cask docker` - Installs Docker VM Damien


often, this won't include the `docker compose` command, so a few additional steps may be required. 

run `docker compose version`, if you get a response skip the following steps. 

1.  Make a docker config directory
    - `mkdir -p ~/.docker `
2. Create a docker config file
    - `vim ~/.docker/config.json`
    - Place the following snippet into the file:
```{
  "cliPluginsExtraDirs": [
    "/opt/homebrew/lib/docker/cli-plugins"
  ]
}
```
3. You can verify this worked via `docker compose version`


Launch Docker via applications, or via cli via: 
`open /Applications/Docker.app`


### WSL - ubuntu Linux

Install Docker Desktop in Windows, enable wsl connection via resources -> wsl connections -> enable integration with ubuntu
 - Note: similar steps for any linux distro

Install docker in WSL client
https://dev.to/bartr/install-docker-on-windows-subsystem-for-linux-v2-ubuntu-5dl7

---


## 3.  Install the correct version of Node using nvm
- Node can be installed via
  - Mac: `brew install node`
  - Linux: TODO

- Nvm Can be installed via:
  - Mac: `brew install nvm`
    - Follow the install steps output by the cli


### Mac M Chips:
Node 14 requires a special command to run on ARM Mac machines:

`NVM_NODEJS_ORG_MIRROR=https://nodejs.raccoon-tw.dev/release nvm install v14.21.3`

If you are not on mac, run:
  - `nvm install 14`


`npm install --legacy-peer-deps`

### Linux:

sudo apt install nodejs

https://github.com/nvm-sh/nvm

##4. Install Yarn

curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
sudo apt update && sudo apt install yarn -y



## 4.  Run `yarn install` from ui directory
## 5.  In the main directory, run `docker compose up`


Note for WSL Users: To enable port forwarding from the WSL environment to your localhost, follow the instructions at https://dev.to/vishnumohanrk/wsl-port-forwarding-2e22
Note: Make sure to edit the shell script to include 3000


5. Run docker compose up from the main directory.

The Development environment should now be up on localhost:3000


Thanks,
TA-Bot Team

Adding a language to the running piston env:
cli/index.js ppman install java --piston-url "http://127.0.0.1:9000"0.1:9000"

cli/index.js run gcc hello.c --piston-url "http://127.0.0.1:9000"


Pushing a new image:

Get a github personal access token (PAT)
export CR_PAT=<github personal access token>
echo $CR_PAT | docker login ghcr.io -u USERNAME --password-stdin
cd into the frontend/backend directory
docker build -f Dockerfile.prod -t ghcr.io/musyslab/tabot-<frontend/backend>:v<VERSION_NUMBER>-tbs-research .
docker push ghcr.io/musyslab/tabot-backend:v<VERSION_NUMBER>-tbs-research

edit docker.yaml
sudo service tabot stop
sudo service tabot start
